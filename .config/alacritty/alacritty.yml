# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 0
  #  lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 6
    y: 6

  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  #decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Windowed

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 5000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  #multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  #auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
#tabspaces: 8

# Font configuration
font:
  normal:
    family: JetBrains Mono
    style: Regular
  #bold:
    #family: JetBrains Mono
    #style:

  # Italic font face
  #italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Bold italic font face
  #bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Bold Italic


  # Point size
  size: 11


# Colors (Base16 Default Dark)
colors:
  # Default colors
  primary:
    background: '#000000'
    foreground: '#ffffff'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '#d8d8d8'
    cursor: '#d8d8d8'
# Normal colors
  normal:
    black:   '#333333'
    red:     '#C4265E'
    green:   '#86B42B'
    yellow:  '#B3B42B'
    blue:    '#6A7EC8'
    magenta: '#8C6BC8'
    cyan:    '#56ADBC'
    white:   '#E3E3DD'
  # Bright colors
  bright:
    black:   '#666666'
    red:     '#F92672'
    green:   '#A6E22E'
    yellow:  '#E2E22E'
    blue:    '#819AFF'
    magenta: '#AE81FF'
    cyan:    '#66D9EF'
    white:   '#F8F8F2'
    
 # Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: Copy }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # (Windows, Linux, and BSD only)
  - { key: P,        mods: Control,       action: Paste            }
  - { key: Insert,   mods: Shift,         action: Paste            }
  - { key: Slash,    mods: Control,       chars: "gc"              }
  - { key: Y,        mods: Control,       action: Copy             }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }
  # Vi Mode
# - { key: Space,  mods: Control,       mode: Vi, action: ScrollToBottom          }
# - { key: Space,  mods: Control,                 action: ToggleViMode            }
# - { key: I,                           mode: Vi, action: ScrollToBottom          }
# - { key: I,                           mode: Vi, action: ToggleViMode            }
# - { key: C,      mods: Control,       mode: Vi, action: ScrollToBottom          }
# - { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
# - { key: Escape,                      mode: Vi, action: ClearSelection          }
# - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
# - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
# - { key: G,                           mode: Vi, action: ScrollToTop             }
# - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
# - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
# - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
# - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
# - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
# - { key: Y,                           mode: Vi, action: Copy                    }
# - { key: Y,                           mode: Vi, action: ClearSelection          }
# - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
# - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
# - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
# - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
# - { key: Return,                      mode: Vi, action: Open                    }
# - { key: K,                           mode: Vi, action: Up                      }
# - { key: J,                           mode: Vi, action: Down                    }
# - { key: H,                           mode: Vi, action: Left                    }
# - { key: L,                           mode: Vi, action: Right                   }
# - { key: Up,                          mode: Vi, action: Up                      }
# - { key: Down,                        mode: Vi, action: Down                    }
# - { key: Left,                        mode: Vi, action: Left                    }
# - { key: Right,                       mode: Vi, action: Right                   }
# - { key: Key0,                        mode: Vi, action: First                   }
# - { key: Key4,            mode: Vi, action: Last                    }
# - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
# - { key: H,      mods: Shift,         mode: Vi, action: High                    }
# - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
# - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
# - { key: B,                           mode: Vi, action: SemanticLeft            }
# - { key: W,                           mode: Vi, action: SemanticRight           }
# - { key: E,                           mode: Vi, action: SemanticRightEnd        }
# - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
# - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
# - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
# - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
# - { key: Slash,                       mode: Vi, action: SearchForward           }
# - { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
# - { key: N,                           mode: Vi, action: SearchNext              }
# - { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

